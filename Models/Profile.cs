/*
 * Product API
 *
 * Move your app forward with the Product API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Profile :  IEquatable<Profile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="FirstName">First name of the Uber user..</param>
        /// <param name="LastName">Last name of the Uber user..</param>
        /// <param name="Email">Email address of the Uber user.</param>
        /// <param name="Picture">Image URL of the Uber user..</param>
        /// <param name="PromoCode">Promo code of the Uber user..</param>
        public Profile(string FirstName = null, string LastName = null, string Email = null, string Picture = null, string PromoCode = null)
        {
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Email = Email;
            this.Picture = Picture;
            this.PromoCode = PromoCode;
            
        }

        /// <summary>
        /// First name of the Uber user.
        /// </summary>
        /// <value>First name of the Uber user.</value>
        [DataMember(Name="first_name")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the Uber user.
        /// </summary>
        /// <value>Last name of the Uber user.</value>
        [DataMember(Name="last_name")]
        public string LastName { get; set; }

        /// <summary>
        /// Email address of the Uber user
        /// </summary>
        /// <value>Email address of the Uber user</value>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Image URL of the Uber user.
        /// </summary>
        /// <value>Image URL of the Uber user.</value>
        [DataMember(Name="picture")]
        public string Picture { get; set; }

        /// <summary>
        /// Promo code of the Uber user.
        /// </summary>
        /// <value>Promo code of the Uber user.</value>
        [DataMember(Name="promo_code")]
        public string PromoCode { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  PromoCode: ").Append(PromoCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Profile)obj);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="other">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Picture == other.Picture ||
                    this.Picture != null &&
                    this.Picture.Equals(other.Picture)
                ) && 
                (
                    this.PromoCode == other.PromoCode ||
                    this.PromoCode != null &&
                    this.PromoCode.Equals(other.PromoCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                    if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                    if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                    if (this.Picture != null)
                    hash = hash * 59 + this.Picture.GetHashCode();
                    if (this.PromoCode != null)
                    hash = hash * 59 + this.PromoCode.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Profile left, Profile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Profile left, Profile right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
