/*
 * Product API
 *
 * Move your app forward with the Product API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PriceEstimate :  IEquatable<PriceEstimate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceEstimate" /> class.
        /// </summary>
        /// <param name="ProductId">Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.</param>
        /// <param name="CurrencyCode">[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code..</param>
        /// <param name="DisplayName">Display name of product..</param>
        /// <param name="Estimate">Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \&quot;Metered\&quot; for TAXI..</param>
        /// <param name="LowEstimate">Lower bound of the estimated price..</param>
        /// <param name="HighEstimate">Upper bound of the estimated price..</param>
        /// <param name="SurgeMultiplier">Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier..</param>
        public PriceEstimate(string ProductId = null, string CurrencyCode = null, string DisplayName = null, string Estimate = null, decimal? LowEstimate = null, decimal? HighEstimate = null, decimal? SurgeMultiplier = null)
        {
            this.ProductId = ProductId;
            this.CurrencyCode = CurrencyCode;
            this.DisplayName = DisplayName;
            this.Estimate = Estimate;
            this.LowEstimate = LowEstimate;
            this.HighEstimate = HighEstimate;
            this.SurgeMultiplier = SurgeMultiplier;
            
        }

        /// <summary>
        /// Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
        /// </summary>
        /// <value>Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles</value>
        [DataMember(Name="product_id")]
        public string ProductId { get; set; }

        /// <summary>
        /// [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
        /// </summary>
        /// <value>[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.</value>
        [DataMember(Name="currency_code")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Display name of product.
        /// </summary>
        /// <value>Display name of product.</value>
        [DataMember(Name="display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI.
        /// </summary>
        /// <value>Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI.</value>
        [DataMember(Name="estimate")]
        public string Estimate { get; set; }

        /// <summary>
        /// Lower bound of the estimated price.
        /// </summary>
        /// <value>Lower bound of the estimated price.</value>
        [DataMember(Name="low_estimate")]
        public decimal? LowEstimate { get; set; }

        /// <summary>
        /// Upper bound of the estimated price.
        /// </summary>
        /// <value>Upper bound of the estimated price.</value>
        [DataMember(Name="high_estimate")]
        public decimal? HighEstimate { get; set; }

        /// <summary>
        /// Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
        /// </summary>
        /// <value>Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.</value>
        [DataMember(Name="surge_multiplier")]
        public decimal? SurgeMultiplier { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceEstimate {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Estimate: ").Append(Estimate).Append("\n");
            sb.Append("  LowEstimate: ").Append(LowEstimate).Append("\n");
            sb.Append("  HighEstimate: ").Append(HighEstimate).Append("\n");
            sb.Append("  SurgeMultiplier: ").Append(SurgeMultiplier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PriceEstimate)obj);
        }

        /// <summary>
        /// Returns true if PriceEstimate instances are equal
        /// </summary>
        /// <param name="other">Instance of PriceEstimate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceEstimate other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.Estimate == other.Estimate ||
                    this.Estimate != null &&
                    this.Estimate.Equals(other.Estimate)
                ) && 
                (
                    this.LowEstimate == other.LowEstimate ||
                    this.LowEstimate != null &&
                    this.LowEstimate.Equals(other.LowEstimate)
                ) && 
                (
                    this.HighEstimate == other.HighEstimate ||
                    this.HighEstimate != null &&
                    this.HighEstimate.Equals(other.HighEstimate)
                ) && 
                (
                    this.SurgeMultiplier == other.SurgeMultiplier ||
                    this.SurgeMultiplier != null &&
                    this.SurgeMultiplier.Equals(other.SurgeMultiplier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                    if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                    if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                    if (this.Estimate != null)
                    hash = hash * 59 + this.Estimate.GetHashCode();
                    if (this.LowEstimate != null)
                    hash = hash * 59 + this.LowEstimate.GetHashCode();
                    if (this.HighEstimate != null)
                    hash = hash * 59 + this.HighEstimate.GetHashCode();
                    if (this.SurgeMultiplier != null)
                    hash = hash * 59 + this.SurgeMultiplier.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PriceEstimate left, PriceEstimate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PriceEstimate left, PriceEstimate right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
