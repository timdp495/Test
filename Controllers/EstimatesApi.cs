/*
 * Product API
 *
 * Move your app forward with the Product API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class EstimatesApiController : Controller
    { 

        /// <summary>
        /// Price Estimates
        /// </summary>
        /// <remarks>The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.&lt;br&gt;&lt;br&gt;The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier. </remarks>
        /// <param name="startLatitude">Latitude component of start location.</param>
        /// <param name="startLongitude">Longitude component of start location.</param>
        /// <param name="endLatitude">Latitude component of end location.</param>
        /// <param name="endLongitude">Longitude component of end location.</param>
        /// <response code="200">An array of price estimates by product</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v1/estimates/price")]
        [SwaggerOperation("EstimatesPriceGet")]
        [SwaggerResponse(200, type: typeof(List<PriceEstimate>))]
        public virtual IActionResult EstimatesPriceGet([FromQuery]double? startLatitude, [FromQuery]double? startLongitude, [FromQuery]double? endLatitude, [FromQuery]double? endLongitude)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PriceEstimate>>(exampleJson)
            : default(List<PriceEstimate>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Time Estimates
        /// </summary>
        /// <remarks>The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.</remarks>
        /// <param name="startLatitude">Latitude component of start location.</param>
        /// <param name="startLongitude">Longitude component of start location.</param>
        /// <param name="customerUuid">Unique customer identifier to be used for experience customization.</param>
        /// <param name="productId">Unique identifier representing a specific product for a given latitude &amp; longitude.</param>
        /// <response code="200">An array of products</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v1/estimates/time")]
        [SwaggerOperation("EstimatesTimeGet")]
        [SwaggerResponse(200, type: typeof(List<Product>))]
        public virtual IActionResult EstimatesTimeGet([FromQuery]double? startLatitude, [FromQuery]double? startLongitude, [FromQuery]Guid? customerUuid, [FromQuery]string productId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Product>>(exampleJson)
            : default(List<Product>);
            return new ObjectResult(example);
        }
    }
}
